-- <autogenerated>
--   This file was generated by dddappp code generator.
--   Any changes made to this file manually will be lost next time the file is regenerated.
-- </autogenerated>

local proxy_contract_template = require("proxy_contract_template")
local response_adapters = require("response_adapters")
local json = require("json")

-- AO Token 转账代理合约
local token_transfer_proxy = proxy_contract_template.create({
    name = "TokenTransferProxy",
    version = "1.0.0",

    -- 外部合约配置 (AO $AO Token)
    external_config = {
        target = "0syT13r0s0tgPmIed95bJnuSqaD29HQNN8D3ElLSrsc", -- AO 原生代币合约
        action = "Transfer",
        response_patterns = {
            success = "Debit-Notice",        -- 转出成功通知
            error = "Transfer-Error"         -- 转账错误
        },
        timeout = 300,  -- 5分钟超时
        max_retries = 3
    },

    -- 响应适配器配置
    response_adapter = response_adapters.presets.ao_token_adapter,

    -- 补偿处理器配置
    compensation_handler = {
        -- 转账补偿：向原发送方退款
        refund_tokens = function(compensation_data)
            return {
                action = "Transfer",
                data = {
                    Recipient = compensation_data.original_sender,
                    Quantity = compensation_data.quantity,
                    -- 注意：这里可能需要额外的验证逻辑
                    -- 比如检查是否有足够的余额进行退款
                }
            }
        end,

        -- 取消转账：这里可能不需要额外操作，因为转账失败时不会改变状态
        cancel_transfer = function(compensation_data)
            -- 转账失败的补偿通常不需要额外操作
            -- 因为失败的转账不会改变任何状态
            return nil
        end
    },

    -- ⚠️ 注意：Token合约不支持主动查询验证接口
    -- 真正的验证通过支付接收合约监听Credit-Notice消息实现

    -- 自定义处理器
    custom_handlers = {
        -- 批量转账处理器
        batch_transfer = {
            filter = Handlers.utils.hasMatchingTag("Action", "BatchTransfer"),
            handler = function(msg)
                local batch_data = json.decode(msg.Data or "{}")
                local transfers = batch_data.transfers or {}

                -- 这里可以实现批量转账逻辑
                -- 为每个转账创建子请求等
                ao.send({
                    Target = msg.From,
                    Tags = { Action = "BatchTransferResponse" },
                    Data = json.encode({
                        status = "batch_transfer_initiated",
                        transfer_count = #transfers,
                        message = "Batch transfer processing started"
                    })
                })
            end
        },

        -- 转账历史查询
        transfer_history = {
            filter = Handlers.utils.hasMatchingTag("Action", "GetTransferHistory"),
            handler = function(msg)
                -- 这里可以实现转账历史查询逻辑
                -- 从外部 Token 合约查询历史记录
                ao.send({
                    Target = msg.From,
                    Tags = { Action = "TransferHistoryResponse" },
                    Data = json.encode({
                        status = "not_implemented",
                        message = "Transfer history feature coming soon"
                    })
                })
            end
        }
    }
})

-- 注册处理器
token_transfer_proxy.register_handlers()

-- 导出代理合约实例
return token_transfer_proxy
