-- <autogenerated>
--   This file was generated by dddappp code generator.
--   Any changes made to this file manually will be lost next time the file is regenerated.
-- </autogenerated>

local json = require("json")
local messaging = require("messaging")
local saga = require("saga")
local saga_messaging = require("saga_messaging")

-- 导入代理合约
local token_transfer_proxy = require("token_transfer_proxy")

local execute_local_compensations_respond_original_requester =
    saga_messaging.execute_local_compensations_respond_original_requester
local rollback_saga_instance_respond_original_requester =
    saga_messaging.rollback_saga_instance_respond_original_requester
local complete_saga_instance_respond_original_requester =
    saga_messaging.complete_saga_instance_respond_original_requester

local payment_service = {}

local ERRORS = {
    INVALID_MESSAGE = "INVALID_MESSAGE",
    COMPENSATION_FAILED = "COMPENSATION_FAILED",
    PAYMENT_FAILED = "PAYMENT_FAILED"
}

payment_service.ERRORS = ERRORS

local ACTIONS = {
    PROCESS_PAYMENT = "PaymentService_ProcessPayment",
    PROCESS_PAYMENT_TRANSFER_TOKENS_CALLBACK =
        "PaymentService_ProcessPayment_TransferTokens_Callback",
    PROCESS_PAYMENT_TRANSFER_TOKENS_COMPENSATION_CALLBACK =
        "PaymentService_ProcessPayment_TransferTokens_Compensation_Callback"
}

payment_service.ACTIONS = ACTIONS

-- 注册代理合约
saga_messaging.register_proxy_contract("token_transfer", token_transfer_proxy.config)

-- 处理支付请求的主函数
function payment_service.process_payment(msg, env, response)
    local cmd
    local decode_success, decode_result = pcall(function()
        return json.decode(msg.Data)
    end)

    if not decode_success then
        messaging.respond(false, "INVALID_JSON_DATA: " .. decode_result, msg)
        return
    end
    cmd = decode_result

    local context = {
        order_id = cmd.order_id,
        customer_address = cmd.customer_address,
        merchant_address = cmd.merchant_address,
        amount = cmd.amount,
        payment_method = cmd.payment_method or "ao_token",
        sender = msg.From  -- 🔑 关键：记录发送者，用于补偿时的退款
    }

    -- 验证支付参数
    if not context.customer_address or not context.merchant_address or not context.amount then
        messaging.respond(false, "MISSING_REQUIRED_PARAMETERS", msg)
        return
    end

    if context.amount <= 0 then
        messaging.respond(false, "INVALID_AMOUNT", msg)
        return
    end

    -- 创建 Saga 实例
    local status, request_or_error, commit = pcall((function()
        local saga_instance, saga_commit = saga.create_saga_instance(
            ACTIONS.PROCESS_PAYMENT,
            token_transfer_proxy.config.external_config.target, -- 代理合约目标
            {
                Action = "ProxyCall",
                ["X-CallbackAction"] = ACTIONS.PROCESS_PAYMENT_TRANSFER_TOKENS_CALLBACK
            },
            context,
            {
                from = msg.From,
                response_action = msg.Tags[messaging.X_TAGS.RESPONSE_ACTION],
                no_response_required = msg.Tags[messaging.X_TAGS.NO_RESPONSE_REQUIRED],
            },
            0  -- 不预留本地步骤
        )

        -- 准备转账请求数据
        local transfer_request = {
            Recipient = context.merchant_address,
            Quantity = tostring(context.amount)
        }

        return transfer_request, saga_commit
    end))

    -- 发送代理调用请求
    messaging.commit_send_or_error(status, request_or_error, commit,
        token_transfer_proxy.config.external_config.target, {
            Action = "ProxyCall",
            ["X-CallbackAction"] = ACTIONS.PROCESS_PAYMENT_TRANSFER_TOKENS_CALLBACK,
            [messaging.X_TAGS.SAGA_ID] = "will_be_set_by_commit"  -- Saga ID 会在 commit 时设置
        })
end

-- 处理转账回调
function payment_service.process_payment_transfer_tokens_callback(msg, env, response)
    local saga_id = tonumber(msg.Tags[messaging.X_TAGS.SAGA_ID])
    local saga_instance = saga.get_saga_instance_copy(saga_id)

    if (saga_instance.current_step ~= 1 or saga_instance.compensating) then
        error(ERRORS.INVALID_MESSAGE)
    end

    local context = saga_instance.context
    local data
    local decode_success, decode_result = pcall(function()
        return json.decode(msg.Data)
    end)

    if not decode_success then
        rollback_saga_instance_respond_original_requester(saga_instance, "INVALID_JSON_DATA: " .. decode_result)
        return
    end
    data = decode_result

    if (data.error) then
        -- 🔑 关键：转账失败时，需要执行代理补偿来恢复状态
        local compensation_config = {
            type = "refund_tokens",
            proxy_contract = "token_transfer",
            compensation_data = {
                original_sender = context.sender or saga_instance.original_message.From,
                quantity = context.amount,  -- 从context中获取原始转账金额
                original_transaction_id = data.transaction_id
            }
        }

        -- 获取代理合约补偿函数（退款操作）
        local proxy_compensation_func = saga_messaging.get_proxy_compensation_function(
            saga_instance, compensation_config, data.error
        )

        -- 执行本地补偿
        local _, local_commits = saga_messaging.execute_local_compensations({}, context)

        -- Rollback Saga
        local commit = saga.rollback_saga_instance(saga_id, 1, nil, nil, context, data.error)

        local total_commit = function()
            -- 先执行代理补偿
            if proxy_compensation_func then
                proxy_compensation_func()
            end

            -- 再执行本地补偿
            for _, local_commit in ipairs(local_commits) do
                local_commit()
            end

            -- 最后提交Saga rollback
            commit()
        end
        total_commit()

        -- 通知支付失败
        messaging.process_operation_result(false, {
            error = "PAYMENT_FAILED",
            reason = data.error,
            order_id = context.order_id
        }, function() end, {
            From = saga_instance.original_message.from,
            Tags = {
                [messaging.X_TAGS.RESPONSE_ACTION] = saga_instance.original_message.response_action,
                [messaging.X_TAGS.NO_RESPONSE_REQUIRED] = saga_instance.original_message.no_response_required
            }
        })
        return
    end

    -- 转账成功，完成支付
    local result = data.result
    local commit = saga.complete_saga_instance(saga_id, {
        status = "payment_completed",
        order_id = context.order_id,
        transaction_details = result,
        timestamp = os.time()
    }, context)

    commit()

    -- 通知支付成功
    messaging.process_operation_result(true, {
        status = "payment_completed",
        order_id = context.order_id,
        amount = context.amount,
        transaction_details = result
    }, function() end, {
        From = saga_instance.original_message.from,
        Tags = {
            [messaging.X_TAGS.RESPONSE_ACTION] = saga_instance.original_message.response_action,
            [messaging.X_TAGS.NO_RESPONSE_REQUIRED] = saga_instance.original_message.no_response_required
        }
    })
end

-- 处理补偿回调（可选，用于复杂补偿场景）
function payment_service.process_payment_transfer_tokens_compensation_callback(msg, env, response)
    local saga_id = tonumber(msg.Tags[messaging.X_TAGS.SAGA_ID])
    local saga_instance = saga.get_saga_instance_copy(saga_id)

    if (saga_instance.current_step ~= 1 or not saga_instance.compensating) then
        error(ERRORS.INVALID_MESSAGE)
    end

    local data = json.decode(msg.Data)

    if (data.error) then
        error(ERRORS.COMPENSATION_FAILED)
    end

    -- 补偿完成，终止 Saga
    rollback_saga_instance_respond_original_requester(saga_instance, nil)
end

-- 支付状态查询
function payment_service.get_payment_status(msg, env, response)
    local order_id = msg.Tags.OrderId

    if not order_id then
        messaging.respond(false, "MISSING_ORDER_ID", msg)
        return
    end

    -- 这里应该查询实际的支付状态
    -- 为了演示，我们返回一个模拟状态
    messaging.respond(true, {
        order_id = order_id,
        status = "completed",  -- 或者 "pending", "failed"
        timestamp = os.time()
    }, msg)
end

return payment_service
