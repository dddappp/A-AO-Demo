-- <autogenerated>
--   This file demonstrates the suggested extensions to src/saga_messaging.lua
--   These are NOT actual modifications to the original file, but rather
--   conceptual examples of how to extend the saga messaging system.
-- </autogenerated>

-- ===== SAGA_MESSAGING.LUA 扩展示例 =====
-- 此文件展示了对 src/saga_messaging.lua 的建议扩展内容
-- 实际使用时，请手动将这些代码添加到 src/saga_messaging.lua 的相应位置

-- 注意：这些扩展假设在 src/saga_messaging.lua 的顶部已经有了：
-- local saga = require("saga")
-- local messaging = require("messaging")
-- local json = require("json")  -- 需要添加这一行

-- ===== 建议的扩展内容（添加到 src/saga_messaging.lua 文件末尾）=====

-- 代理合约注册表
local proxy_registry = {}

-- 注册代理合约实例
-- 这个函数允许注册代理合约实例到运行时注册表中
function saga_messaging.register_proxy_contract(name, proxy_instance)
    proxy_registry[name] = proxy_instance
    return proxy_instance
end

-- 获取代理合约实例
-- 根据名称获取已注册的代理合约实例
function saga_messaging.get_proxy_contract(name)
    return proxy_registry[name]
end

-- 创建代理步骤的 Saga 实例
-- 这是一个高级工具函数，用于创建包含代理步骤的 Saga 实例
-- 参数说明：
--   saga_type: Saga 类型标识符
--   proxy_contract_name: 已注册的代理合约名称
--   external_call_config: 外部调用配置，包含 callback_action 等
--   context: Saga 上下文数据
--   original_message: 原始请求消息
function saga_messaging.create_proxy_step_saga(saga_type, proxy_contract_name, external_call_config, context, original_message)
    -- 获取代理合约实例
    local proxy_contract = proxy_registry[proxy_contract_name]
    if not proxy_contract then
        error("Proxy contract not found: " .. proxy_contract_name)
    end

    -- 获取代理合约的目标地址
    local proxy_target = proxy_contract.config.external_config.target

    -- 构建发送给代理合约的消息标签
    local proxy_tags = {
        Action = "ProxyCall",  -- 固定动作，表示这是代理调用
        ["X-CallbackAction"] = external_call_config.callback_action,  -- 指定回调动作
    }

    -- 创建 Saga 实例，目标是代理合约
    local saga_instance, commit = saga.create_saga_instance(
        saga_type,           -- Saga 类型
        proxy_target,        -- 目标地址（代理合约）
        proxy_tags,          -- 消息标签
        context,             -- 上下文数据
        original_message,    -- 原始消息
        0                    -- 不预留本地步骤，因为这是外部调用
    )

    return saga_instance, commit
end

-- 执行代理补偿
-- 处理代理合约的补偿逻辑
function saga_messaging.execute_proxy_compensation(saga_instance, compensation_config, _err)
    local compensation_type = compensation_config.type
    local proxy_contract_name = compensation_config.proxy_contract

    -- 获取代理合约实例
    local proxy_contract = proxy_registry[proxy_contract_name]
    if not proxy_contract then
        error("Proxy contract not found for compensation: " .. proxy_contract_name)
    end

    -- 🔑 核心：返回代理补偿函数（不立即执行）
    local compensation_handler = proxy_contract.config.compensation_handler[compensation_type]

    if not compensation_handler then
        error("Compensation handler not found for type: " .. compensation_type)
    end

    -- 返回补偿函数，由调用方决定何时执行
    return function()
        -- 执行补偿逻辑
        print("Executing proxy compensation: " .. compensation_type .. " for saga: " .. saga_instance.saga_id)

        -- 调用代理合约的补偿处理器
        local compensation_request = compensation_handler(compensation_config.compensation_data or {})

        if compensation_request then
            -- 发送补偿请求到外部合约
            ao.send({
                Target = proxy_contract.config.external_config.target,
                Tags = {
                    Action = compensation_request.action,
                    ["X-CompensationSagaId"] = saga_instance.saga_id,
                    ["X-CompensationType"] = compensation_type
                },
                Data = json.encode(compensation_request.data or {})
            })
            print("Sent compensation request to external contract: " .. compensation_request.action)
        else
            print("Compensation handler returned no action (no compensation needed)")
        end
    end
end

-- 代理响应处理器工厂
-- 创建一个处理器函数来处理代理合约的异步响应
-- 这是一个工厂函数，返回实际的处理器函数
function saga_messaging.create_proxy_response_handler(proxy_contract_name, success_callback, error_callback)
    return function(msg)
        -- 获取代理合约实例
        local proxy_contract = proxy_registry[proxy_contract_name]
        if not proxy_contract then
            error("Proxy contract not found: " .. proxy_contract_name)
        end

        -- 解析响应数据（带错误处理）
        local data = {}
        local decode_success, decode_result = pcall(function()
            return json.decode(msg.Data or "{}")
        end)

        if decode_success then
            data = decode_result
        else
            print("Failed to decode proxy response data: " .. decode_result)
            data = { error = "JSON_DECODE_ERROR", message = decode_result }
        end

        -- 根据响应类型调用相应的回调函数
        if data.error then
            -- 错误响应
            if error_callback then
                error_callback(data.error, msg)
            end
        elseif data.result then
            -- 成功响应
            if success_callback then
                success_callback(data.result, msg)
            end
        else
            -- 未知响应类型
            print("Warning: Received unknown response type from proxy contract: " .. proxy_contract_name)
        end
    end
end

-- 初始化代理系统
-- 可选的初始化函数，用于代理系统的设置
function saga_messaging.init_proxy_system()
    -- 可以在这里进行代理系统的初始化
    -- 例如：设置全局配置、预注册常用代理合约等

    print("Proxy system initialized")

    -- 示例：可以在这里预注册一些常用的代理合约
    -- local token_proxy = require("token_proxy_config")
    -- saga_messaging.register_proxy_contract("default_token", token_proxy)
end

-- 获取代理补偿函数（不立即执行）
function saga_messaging.get_proxy_compensation_function(saga_instance, compensation_config, _err)
    local proxy_contract_name = compensation_config.proxy_contract
    local compensation_type = compensation_config.type

    local proxy_contract = proxy_registry[proxy_contract_name]
    if not proxy_contract then
        error("Proxy contract not found for compensation: " .. proxy_contract_name)
    end

    -- 🔑 核心：返回代理补偿函数（不立即执行）
    local compensation_handler = proxy_contract.config.compensation_handler[compensation_type]

    if not compensation_handler then
        error("Compensation handler not found for type: " .. compensation_type)
    end

    -- 返回补偿函数，由调用方决定何时执行
    return function()
        -- 执行补偿逻辑
        print("Executing proxy compensation: " .. compensation_type .. " for saga: " .. saga_instance.saga_id)

        -- 调用代理合约的补偿处理器
        local compensation_request = compensation_handler(compensation_config.compensation_data or {})

        if compensation_request then
            -- 发送补偿请求到外部合约
            ao.send({
                Target = proxy_contract.config.external_config.target,
                Tags = {
                    Action = compensation_request.action,
                    ["X-CompensationSagaId"] = saga_instance.saga_id,
                    ["X-CompensationType"] = compensation_type
                },
                Data = json.encode(compensation_request.data or {})
            })
            print("Sent compensation request to external contract: " .. compensation_request.action)
        else
            print("Compensation handler returned no action (no compensation needed)")
        end
    end
end

-- ===== 扩展内容结束 =====

-- ===== 使用示例 =====
-- 以下是这些扩展函数的使用示例（这些代码不会实际运行，只做演示）

-- 示例1：注册代理合约
-- local token_proxy = require("token_transfer_proxy")
-- saga_messaging.register_proxy_contract("token_transfer", token_proxy)

-- 示例2：创建包含代理步骤的 Saga
-- function create_payment_saga(payment_request)
--     local saga_instance, commit = saga_messaging.create_proxy_step_saga(
--         "PAYMENT_SAGA",
--         "token_transfer",  -- 代理合约名称
--         {
--             callback_action = "PaymentService_ProcessPayment_TransferTokens_Callback"
--         },
--         {
--             amount = payment_request.amount,
--             recipient = payment_request.merchant_address
--         },
--         payment_request  -- 原始消息
--     )
--
--     -- 提交 Saga 创建
--     commit()
-- end

-- 示例3：创建响应处理器
-- local response_handler = saga_messaging.create_proxy_response_handler(
--     "token_transfer",
--     function(result, msg) print("Transfer successful:", result.transaction_id) end,
--     function(error, msg) print("Transfer failed:", error) end
-- )

-- 示例4：初始化代理系统
-- saga_messaging.init_proxy_system()

print("This file demonstrates the suggested extensions to saga_messaging.lua")
print("DO NOT load or execute this file in production - it is for documentation only")
