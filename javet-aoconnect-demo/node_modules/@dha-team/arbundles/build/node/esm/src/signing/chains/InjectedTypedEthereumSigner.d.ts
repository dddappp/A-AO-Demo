/// <reference types="node" />
import { SignatureConfig } from "../../constants.js";
import type { Signer } from "../index.js";
export type Bytes = ArrayLike<number>;
export type BytesLike = Bytes | string;
export type BigNumberish = /* BigNumber */ Bytes | bigint | string | number;
export interface TypedDataDomain {
    name?: string;
    version?: string;
    chainId?: BigNumberish;
    verifyingContract?: string;
    salt?: BytesLike;
}
export interface TypedDataField {
    name: string;
    type: string;
}
export interface InjectedTypedEthereumSignerMinimalSigner {
    getAddress: () => Promise<string>;
    _signTypedData(domain: TypedDataDomain, types: Record<string, TypedDataField[]>, value: Record<string, any>): Promise<string>;
}
export interface InjectedTypedEthereumSignerMinimalProvider {
    getSigner(): InjectedTypedEthereumSignerMinimalSigner;
}
export declare class InjectedTypedEthereumSigner implements Signer {
    readonly ownerLength: number;
    readonly signatureLength: number;
    readonly signatureType: SignatureConfig;
    private address;
    protected signer: InjectedTypedEthereumSignerMinimalSigner;
    publicKey: Buffer;
    constructor(provider: InjectedTypedEthereumSignerMinimalProvider);
    ready(): Promise<void>;
    sign(message: Uint8Array): Promise<Uint8Array>;
    static verify(pk: string | Buffer, message: Uint8Array, signature: Uint8Array): boolean;
}
export default InjectedTypedEthereumSigner;
