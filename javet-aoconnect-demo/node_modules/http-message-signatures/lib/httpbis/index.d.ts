/// <reference types="node" />
import { Parameters } from 'structured-headers';
import { Request, Response, SignConfig, VerifyConfig, CommonConfig } from '../types';
export declare function deriveComponent(component: string, params: Map<string, string | number | boolean>, res: Response, req?: Request): string[];
export declare function deriveComponent(component: string, params: Map<string, string | number | boolean>, req: Request): string[];
export declare function extractHeader(header: string, params: Map<string, string | number | boolean>, res: Response, req?: Request): string[];
export declare function extractHeader(header: string, params: Map<string, string | number | boolean>, req: Request): string[];
export declare function createSignatureBase(config: CommonConfig & {
    fields: string[];
}, res: Response, req?: Request): [string, string[]][];
export declare function createSignatureBase(config: CommonConfig & {
    fields: string[];
}, req: Request): [string, string[]][];
export declare function formatSignatureBase(base: [string, string[]][]): string;
export declare function createSigningParameters(config: SignConfig): Parameters;
export declare function augmentHeaders(headers: Record<string, string | string[]>, signature: Buffer, signatureInput: string, name?: string): Record<string, string | string[]>;
export declare function signMessage<T extends Response = Response, U extends Request = Request>(config: SignConfig, res: T, req?: U): Promise<T>;
export declare function signMessage<T extends Request = Request>(config: SignConfig, req: T): Promise<T>;
export declare function verifyMessage(config: VerifyConfig, response: Response, request?: Request): Promise<boolean | null>;
export declare function verifyMessage(config: VerifyConfig, request: Request): Promise<boolean | null>;
