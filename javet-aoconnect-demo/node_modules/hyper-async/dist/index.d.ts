export function of(x: any): {
    [x: number]: boolean;
    fork: any;
    toPromise: () => any;
    map: (fn: any) => any;
    bimap: (f: any, g: any) => any;
    chain: (fn: any) => any;
    bichain: (f: any, g: any) => any;
    fold: (f: any, g: any) => any;
};
export function Resolved(x: any): {
    [x: number]: boolean;
    fork: any;
    toPromise: () => any;
    map: (fn: any) => any;
    bimap: (f: any, g: any) => any;
    chain: (fn: any) => any;
    bichain: (f: any, g: any) => any;
    fold: (f: any, g: any) => any;
};
export function Rejected(x: any): {
    [x: number]: boolean;
    fork: any;
    toPromise: () => any;
    map: (fn: any) => any;
    bimap: (f: any, g: any) => any;
    chain: (fn: any) => any;
    bichain: (f: any, g: any) => any;
    fold: (f: any, g: any) => any;
};
export function fromPromise(f: any): (...args: any[]) => {
    [x: number]: boolean;
    fork: any;
    toPromise: () => any;
    map: (fn: any) => any;
    bimap: (f: any, g: any) => any;
    chain: (fn: any) => any;
    bichain: (f: any, g: any) => any;
    fold: (f: any, g: any) => any;
};
declare namespace _default {
    export { of };
    export { fromPromise };
    export { Resolved };
    export { Rejected };
}
export default _default;
export type Function = (x: unknown) => unknown;
export type AsyncFunction = (fn: unknown) => Async;
export type BiFunction = (x: globalThis.Function, y: globalThis.Function) => Async;
export type Handler = (fn: unknown) => unknown;
export type Fork = (rejected: Handler, resolved: Handler) => unknown;
export type Map = (fn: globalThis.Function) => Async;
export type Chain = (fn: AsyncFunction) => Async;
export type BiChainFn = (fn: AsyncFunction) => Async;
export type Fold = (rej: globalThis.Function, res: globalThis.Function) => Async;
export type Async = (fork: Fork) => {
    fork: Fork;
    toPromise: Promise<unknown>;
    map: Map;
    bimap: BiFunction;
    chain: Chain;
    bichain: BiChainFn;
    fold: Fold;
};
declare function Async(fork: any): {
    [x: number]: boolean;
    fork: any;
    toPromise: () => any;
    map: (fn: any) => any;
    bimap: (f: any, g: any) => any;
    chain: (fn: any) => any;
    bichain: (f: any, g: any) => any;
    fold: (f: any, g: any) => any;
};
