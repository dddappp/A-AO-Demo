export function findAll(protocol: string, tags: Tag[]): Tag[];
export function findAllByName(protocol: string, name: string, tags: Tag[]): Tag[];
export function findByName(protocol: string, name: string, tags: Tag[]): Tag | undefined;
export function create(protocol: string, pTags: Tag[]): Tag[];
export function concat(protocol: string, pTags: Tag[], tags: Tag[]): Tag[];
export function concatUnassoc(others: Tag[], tags: Tag[]): Tag[];
export function update(protocol: string, pTags: Tag[], tags: Tag[]): Tag[];
export function removeAll(protocol: string, tags: Tag[]): Tag[];
export function removeAllByName(protocol: string, name: string, tags: Tag[]): Tag[];
export function parseAll(protocol: string, tags: Tag[]): Record<string, Tag[]>;
export function parse(protocol: string, tags: Tag[]): Record<string, Tag>;
export function parseUnassoc(tags: Tag[]): Record<string, Tag>;
export function parseAllUnassoc(tags: Tag[]): Record<string, Tag[]>;
export function proto(p: string): {
    /**
     * @type {import('./types').RemoveFirstArg<findAll>}
     */
    findAll: import("./types").RemoveFirstArg<(protocol: string, tags: Tag[]) => Tag[]>;
    /**
     * @type {import('./types').RemoveFirstArg<findAllByName>}
     */
    findAllByName: import("./types").RemoveFirstArg<(protocol: string, name: string, tags: Tag[]) => Tag[]>;
    /**
     * @type {import('./types').RemoveFirstArg<findByName>}
     */
    findByName: import("./types").RemoveFirstArg<(protocol: string, name: string, tags: Tag[]) => Tag | undefined>;
    /**
     * @type {import('./types').RemoveFirstArg<create>}
     */
    create: import("./types").RemoveFirstArg<(protocol: string, pTags: Tag[]) => Tag[]>;
    /**
     * @type {import('./types').RemoveFirstArg<update>}
     */
    update: import("./types").RemoveFirstArg<(protocol: string, pTags: Tag[], tags: Tag[]) => Tag[]>;
    /**
     * @type {import('./types').RemoveFirstArg<concat>}
     */
    concat: import("./types").RemoveFirstArg<(protocol: string, pTags: Tag[], tags: Tag[]) => Tag[]>;
    /**
     * @type {import('./types').RemoveFirstArg<removeAll>}
     */
    removeAll: import("./types").RemoveFirstArg<(protocol: string, tags: Tag[]) => Tag[]>;
    /**
     * @type {import('./types').RemoveFirstArg<removeAllByName>}
     */
    removeAllByName: import("./types").RemoveFirstArg<(protocol: string, name: string, tags: Tag[]) => Tag[]>;
    /**
     * @type {import('./types').RemoveFirstArg<parse>}
     */
    parse: import("./types").RemoveFirstArg<(protocol: string, tags: Tag[]) => Record<string, Tag>>;
    /**
     * @type {import('./types').RemoveFirstArg<parseAll>}
     */
    parseAll: import("./types").RemoveFirstArg<(protocol: string, tags: Tag[]) => Record<string, Tag[]>>;
    concatUnassoc: (others: Tag[], tags: Tag[]) => Tag[];
    parseUnassoc: (tags: Tag[]) => Record<string, Tag>;
    parseAllUnassoc: (tags: Tag[]) => Record<string, Tag[]>;
};
export type Tag = {
    /**
     * - The name of the tag
     */
    name: string;
    /**
     * - The value of the tag
     */
    value: string;
};
