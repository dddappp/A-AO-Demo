/**
 * @typedef Env1
 * @property {fetch} fetch
 * @property {string} GRAPHQL_URL
 *
 * @callback LoadTransactionMeta
 * @param {string} id - the id of the contract whose src is being loaded
 * @returns {Async<z.infer<typeof transactionConnectionSchema>['data']['transactions']['edges'][number]['node']>}
 *
 * @param {Env1} env
 * @returns {LoadTransactionMeta}
 */
export function loadTransactionMetaWith({ fetch, GRAPHQL_URL, logger }: Env1): LoadTransactionMeta;
export type Env1 = {
    fetch: typeof globalThis.fetch;
    GRAPHQL_URL: string;
};
export type LoadTransactionMeta = (id: string) => Async<z.infer<z.ZodObject<{
    data: z.ZodObject<{
        transactions: z.ZodObject<{
            edges: z.ZodArray<z.ZodObject<{
                node: z.ZodRecord<z.ZodString, z.ZodAny>;
            }, "strip", z.ZodTypeAny, {
                node?: Record<string, any>;
            }, {
                node?: Record<string, any>;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            edges?: {
                node?: Record<string, any>;
            }[];
        }, {
            edges?: {
                node?: Record<string, any>;
            }[];
        }>;
    }, "strip", z.ZodTypeAny, {
        transactions?: {
            edges?: {
                node?: Record<string, any>;
            }[];
        };
    }, {
        transactions?: {
            edges?: {
                node?: Record<string, any>;
            }[];
        };
    }>;
}, "strip", z.ZodTypeAny, {
    data?: {
        transactions?: {
            edges?: {
                node?: Record<string, any>;
            }[];
        };
    };
}, {
    data?: {
        transactions?: {
            edges?: {
                node?: Record<string, any>;
            }[];
        };
    };
}>>["data"]["transactions"]["edges"][number]["node"]>;
import { z } from 'zod';
