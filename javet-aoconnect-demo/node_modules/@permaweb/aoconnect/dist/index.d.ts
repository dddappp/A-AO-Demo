export const createDataItemSigner: typeof WalletClient.createSigner;
export const createSigner: typeof WalletClient.createSigner;
export const connect: {
    /**
     * Build the sdk apis using the provided configuration. You can currently specify
     *
     * - a GATEWAY_URL
     * - a GRAPHQL_URL (defaults to GATEWAY_URL/graphql)
     * - a GRAPHQL_MAX_RETRIES. Defaults to 0
     * - a GRAPHQL_RETRY_BACKOFF. Defaults to 300 (moot if GRAPHQL_MAX_RETRIES is set to 0)
     * - a Messenger Unit URL
     * - a Compute Unit URL
     * - a AO Unit URL (in mainnet mode)
     * - a Relay Unit URL (in relay mode)
     * - a wallet to use for signing HTTP messages (in mainnet or relay mode)
     *
     * If any value is not provided, an SDK default will be used.
     * Invoking connect() with no parameters or an empty object is functionally equivalent
     * to using the top-lvl exports of the SDK ie.
     *
     * @example
     * import {
     *  spawn,
     *  message,
     *  result,
     *  results,
     *  monitor,
     *  connect
     * } from '@permaweb/ao-sdk';
     *
     * // These are functionally equivalent
     * connect() == { spawn, message, result, results, monitor }
     *
     * @typedef {'legacy' | 'mainnet'} ConnectMode
     *
     * @typedef ConnectArgsShared
     * @property {string} [GATEWAY_URL] - the url of the desried Gateway.
     * @property {string} [GRAPHQL_URL] - the url of the desired Arweave Gateway GraphQL Server
     * @property {number} [GRAPHQL_MAX_RETRIES] - the number of times to retry querying the gateway, utilizing an exponential backoff
     * @property {number} [GRAPHQL_RETRY_BACKOFF] - the initial backoff, in milliseconds (moot if GRAPHQL_MAX_RETRIES is set to 0)
     * @property {string} [MU_URL] - the url of the desried ao Messenger Unit. Also used as the relay MU in 'relay' mode
     * @property {string} [CU_URL] - the url of the desried ao Compute Unit. Also used as the relay CU in 'relay' mode
     *
     * @typedef ConnectArgsMainnet
     * @property {Types['signer']} [signer] - the signer used to sign Data items and HTTP messages.
     * @property {string} [URL] - the url of the desried ao Unit. Only applicable in 'mainnet' mode
     * @property {string} [device] - the default path either 'relay@1.0' or 'process@1.0'
     *
     * @typedef ConnectArgs
     * @property {ConnectMode} [MODE] - the mode that connect apis will be run in.
     *
     * @overload
     * @param {{ MODE: 'legacy'} & ConnectArgsShared } args
     * @returns {ReturnType<typeof legacyMode>}
     *
     * @overload
     * @param {{ MODE: 'mainnet'} & ConnectArgsShared & ConnectArgsMainnet } args
     * @returns {ReturnType<typeof mainnetMode>}
     *
     * @param {ConnectArgs} args
     * @returns {ReturnType<typeof legacyMode> | ReturnType<typeof mainnetMode>}
     */
    (args: {
        MODE: "legacy";
    } & {
        /**
         * - the url of the desried Gateway.
         */
        GATEWAY_URL?: string;
        /**
         * - the url of the desired Arweave Gateway GraphQL Server
         */
        GRAPHQL_URL?: string;
        /**
         * - the number of times to retry querying the gateway, utilizing an exponential backoff
         */
        GRAPHQL_MAX_RETRIES?: number;
        /**
         * - the initial backoff, in milliseconds (moot if GRAPHQL_MAX_RETRIES is set to 0)
         */
        GRAPHQL_RETRY_BACKOFF?: number;
        /**
         * - the url of the desried ao Messenger Unit. Also used as the relay MU in 'relay' mode
         */
        MU_URL?: string;
        /**
         * - the url of the desried ao Compute Unit. Also used as the relay CU in 'relay' mode
         */
        CU_URL?: string;
    }): ReturnType<({ MODE, GRAPHQL_URL, GRAPHQL_MAX_RETRIES, GRAPHQL_RETRY_BACKOFF, MU_URL, CU_URL, fetch, noLog }: {
        MODE: any;
        GRAPHQL_URL: any;
        GRAPHQL_MAX_RETRIES: any;
        GRAPHQL_RETRY_BACKOFF: any;
        MU_URL?: string;
        CU_URL?: string;
        fetch?: typeof globalThis.fetch;
        noLog: any;
    }) => {
        MODE: any;
        result: import("./lib/result/index.js").ReadResult;
        results: import("./lib/results/index.js").ReadResults;
        message: import("./lib/message/index.js").SendMessage;
        spawn: import("./lib/spawn/index.js").SpawnProcess;
        monitor: import("./lib/monitor/index.js").SendMonitor;
        unmonitor: import("./lib/unmonitor/index.js").SendMonitor;
        dryrun: import("./lib/dryrun/index.js").DryRun;
        assign: import("./lib/assign/index.js").Assign;
        createDataItemSigner: (wallet: any) => import("./dal.js").Types["signer"];
        signMessage: ({ process, data, tags, anchor, signer }: {
            process: any;
            data: any;
            tags: any;
            anchor: any;
            signer: any;
        }) => any;
        sendSignedMessage: ({ id, raw }: {
            id: any;
            raw: any;
        }) => any;
        getMessages: import("./lib/messages/index.js").Messages;
        getLastSlot: import("./lib/process-id/index.js").ProcessId;
        getMessageById: ProcessId;
    }>;
    /**
     * Build the sdk apis using the provided configuration. You can currently specify
     *
     * - a GATEWAY_URL
     * - a GRAPHQL_URL (defaults to GATEWAY_URL/graphql)
     * - a GRAPHQL_MAX_RETRIES. Defaults to 0
     * - a GRAPHQL_RETRY_BACKOFF. Defaults to 300 (moot if GRAPHQL_MAX_RETRIES is set to 0)
     * - a Messenger Unit URL
     * - a Compute Unit URL
     * - a AO Unit URL (in mainnet mode)
     * - a Relay Unit URL (in relay mode)
     * - a wallet to use for signing HTTP messages (in mainnet or relay mode)
     *
     * If any value is not provided, an SDK default will be used.
     * Invoking connect() with no parameters or an empty object is functionally equivalent
     * to using the top-lvl exports of the SDK ie.
     *
     * @example
     * import {
     *  spawn,
     *  message,
     *  result,
     *  results,
     *  monitor,
     *  connect
     * } from '@permaweb/ao-sdk';
     *
     * // These are functionally equivalent
     * connect() == { spawn, message, result, results, monitor }
     *
     * @typedef {'legacy' | 'mainnet'} ConnectMode
     *
     * @typedef ConnectArgsShared
     * @property {string} [GATEWAY_URL] - the url of the desried Gateway.
     * @property {string} [GRAPHQL_URL] - the url of the desired Arweave Gateway GraphQL Server
     * @property {number} [GRAPHQL_MAX_RETRIES] - the number of times to retry querying the gateway, utilizing an exponential backoff
     * @property {number} [GRAPHQL_RETRY_BACKOFF] - the initial backoff, in milliseconds (moot if GRAPHQL_MAX_RETRIES is set to 0)
     * @property {string} [MU_URL] - the url of the desried ao Messenger Unit. Also used as the relay MU in 'relay' mode
     * @property {string} [CU_URL] - the url of the desried ao Compute Unit. Also used as the relay CU in 'relay' mode
     *
     * @typedef ConnectArgsMainnet
     * @property {Types['signer']} [signer] - the signer used to sign Data items and HTTP messages.
     * @property {string} [URL] - the url of the desried ao Unit. Only applicable in 'mainnet' mode
     * @property {string} [device] - the default path either 'relay@1.0' or 'process@1.0'
     *
     * @typedef ConnectArgs
     * @property {ConnectMode} [MODE] - the mode that connect apis will be run in.
     *
     * @overload
     * @param {{ MODE: 'legacy'} & ConnectArgsShared } args
     * @returns {ReturnType<typeof legacyMode>}
     *
     * @overload
     * @param {{ MODE: 'mainnet'} & ConnectArgsShared & ConnectArgsMainnet } args
     * @returns {ReturnType<typeof mainnetMode>}
     *
     * @param {ConnectArgs} args
     * @returns {ReturnType<typeof legacyMode> | ReturnType<typeof mainnetMode>}
     */
    (args: {
        MODE: "mainnet";
    } & {
        /**
         * - the url of the desried Gateway.
         */
        GATEWAY_URL?: string;
        /**
         * - the url of the desired Arweave Gateway GraphQL Server
         */
        GRAPHQL_URL?: string;
        /**
         * - the number of times to retry querying the gateway, utilizing an exponential backoff
         */
        GRAPHQL_MAX_RETRIES?: number;
        /**
         * - the initial backoff, in milliseconds (moot if GRAPHQL_MAX_RETRIES is set to 0)
         */
        GRAPHQL_RETRY_BACKOFF?: number;
        /**
         * - the url of the desried ao Messenger Unit. Also used as the relay MU in 'relay' mode
         */
        MU_URL?: string;
        /**
         * - the url of the desried ao Compute Unit. Also used as the relay CU in 'relay' mode
         */
        CU_URL?: string;
    } & {
        /**
         * - the signer used to sign Data items and HTTP messages.
         */
        signer?: import("./dal.js").Types["signer"];
        /**
         * - the url of the desried ao Unit. Only applicable in 'mainnet' mode
         */
        URL?: string;
        /**
         * - the default path either 'relay@1.0' or 'process@1.0'
         */
        device?: string;
    }): ReturnType<({ MODE, signer, GRAPHQL_URL, device, URL, MU_URL, CU_URL, fetch }: {
        MODE: any;
        signer: any;
        GRAPHQL_URL: any;
        device?: string;
        URL?: string;
        MU_URL?: string;
        CU_URL?: string;
        fetch?: typeof globalThis.fetch;
    }) => {
        MODE: string;
        request: import("./lib/request/index.js").Request;
        createSigner: any;
        createDataItemSigner: ((wallet: any) => import("./dal.js").Types["signer"]) | (() => any);
        getMessages: import("./lib/messages/index.js").Messages;
        getLastSlot: import("./lib/process-id/index.js").ProcessId;
        getMessageById: ProcessId;
    }>;
};
import { serializeCron } from './index.common.js';
export const result: import("./lib/result/index.js").ReadResult;
export const results: import("./lib/results/index.js").ReadResults;
export const message: import("./lib/message/index.js").SendMessage;
export const spawn: import("./lib/spawn/index.js").SpawnProcess;
export const monitor: import("./lib/monitor/index.js").SendMonitor;
export const unmonitor: import("./lib/unmonitor/index.js").SendMonitor;
export const dryrun: import("./lib/dryrun/index.js").DryRun;
export const assign: import("./lib/assign/index.js").Assign;
import { WalletClient } from './client/node/index.js';
export { serializeCron };
