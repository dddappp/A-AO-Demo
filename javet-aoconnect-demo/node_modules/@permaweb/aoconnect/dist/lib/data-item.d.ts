/**
 * Abstract @dha-team/arbundles away,
 * to hedge against rolling needed functionality
 * directly into aoconnect, later
 *
 * TODO:
 *
 * ANS-104 implictly requires a signature type ->
 * signature meta registry.
 *
 * It is not ideal that this is in code, as the registry
 * is effectively hardcoded and esoteric in this way.
 * This precedent seems to have been set with the arbundles
 * implementation
 *
 * Perhaps eventually each of these signature types
 * would be public somehwere ie. recursively defined Data Items that each implement
 * a Data-Protocol for "Data Item Signature Type", on arweave.
 */
/**
 * @typedef DataItemSignerInfo
 * @property {SignatureTypes} type
 * @property {string} publicKey
 *
 * @typedef {Object} DataItemCreateOptions
 * @property {string} [target] - Optional target value.
 * @property {string} [anchor] - Optional anchor value.
 * @property {{ name: string; value: string }[]} [tags] - Optional array of tag objects.
 *
 * @param {string | Uint8Array} data - the data to be encoded into the Data Item
 * @param {DataItemSignerInfo} signer - the signature type and corresponding publicKey as a Uint8Array
 * @param {DataItemCreateOptions} opts - named data to be encoded into the Data Item
 * @returns {Uint8Array}
 */
export function createDataItemBytes(data: string | Uint8Array, signer: DataItemSignerInfo, opts: DataItemCreateOptions): Uint8Array;
export function getRawAndId(dataItemBytes: any): Promise<{
    id: string;
    raw: BufferShim;
}>;
export function getSignatureData(dataItemBytes: any): Promise<Uint8Array<ArrayBuffer>>;
export function verify(dataItemBytes: any): Promise<boolean>;
export type DataItemSignerInfo = {
    type: SignatureTypes;
    publicKey: string;
};
export type DataItemCreateOptions = {
    /**
     * - Optional target value.
     */
    target?: string;
    /**
     * - Optional anchor value.
     */
    anchor?: string;
    /**
     * - Optional array of tag objects.
     */
    tags?: {
        name: string;
        value: string;
    }[];
};
import { Buffer as BufferShim } from 'buffer/index.js';
