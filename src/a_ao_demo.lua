-- <autogenerated>
--   This file was generated by dddappp code generator.
--   Any changes made to this file manually will be lost next time the file is regenerated.
-- </autogenerated>

ArticleTable = ArticleTable and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(ArticleTable) or {}

ArticleIdSequence = ArticleIdSequence and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(ArticleIdSequence) or { 0 }

CommentTable = CommentTable and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(CommentTable) or {}

InventoryItemTable = InventoryItemTable and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(InventoryItemTable) or {}


SagaInstances = SagaInstances and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(SagaInstances) or {}

SagaIdSequence = SagaIdSequence and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(SagaIdSequence) or { 0 }


local json = require("json")
local entity_coll = require("entity_coll")
local messaging = require("messaging")
local saga = require("saga")
local article_comment_id = require("article_comment_id")
local inventory_item_id = require("inventory_item_id")
local article_aggregate = require("article_aggregate")
local inventory_item_aggregate = require("inventory_item_aggregate")
local inventory_service = require("inventory_service")

print("DEBUG: Initializing handlers, Handlers type: " .. type(Handlers))

article_aggregate.init(ArticleTable, ArticleIdSequence, CommentTable)

inventory_item_aggregate.init(InventoryItemTable)

saga.init(SagaInstances, SagaIdSequence)


local function get_article(msg, env, response)
    local status, result = pcall((function()
        local cmd = json.decode(msg.Data)
        local article_id = cmd.article_id
        local _state = entity_coll.get(ArticleTable, article_id)
        return _state
    end))
    if msg.reply then
        msg.reply(result)
    else
        Send({Target = msg.From, Data = json.encode(result)})
    end
end

local function get_comment(msg, env, response)
    local status, result = pcall((function()
        local cmd = json.decode(msg.Data)
        local _article_comment_id = cmd.article_comment_id
        local _key = json.encode(article_comment_id.to_key_array(_article_comment_id))
        local _state = entity_coll.get(CommentTable, _key)
        return _state
    end))
    if msg.reply then
        msg.reply(result)
    else
        Send({Target = msg.From, Data = json.encode(result)})
    end
end

local function update_article_body(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return article_aggregate.update_body(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

local function create_article(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return article_aggregate.create(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

local function update_article(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return article_aggregate.update(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

local function add_comment(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return article_aggregate.add_comment(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

local function update_comment(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return article_aggregate.update_comment(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

local function remove_comment(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return article_aggregate.remove_comment(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

local function get_inventory_item(msg, env, response)
    local status, result = pcall((function()
        local cmd = json.decode(msg.Data)
        local _inventory_item_id = cmd.inventory_item_id
        local _key = json.encode(inventory_item_id.to_key_array(_inventory_item_id))
        local _state = entity_coll.get(InventoryItemTable, _key)
        return _state
    end))
    if msg.reply then
        msg.reply(result)
    else
        Send({Target = msg.From, Data = json.encode(result)})
    end
end

local function add_inventory_item_entry(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return inventory_item_aggregate.add_inventory_item_entry(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

Handlers.add(
    "get_article",
    Handlers.utils.hasMatchingTag("Action", "GetArticle"),
    get_article
)

Handlers.add(
    "get_comment",
    Handlers.utils.hasMatchingTag("Action", "GetComment"),
    get_comment
)

Handlers.add(
    "debug_all_messages",
    function(msg) return true end,  -- 匹配所有消息
    function(msg, env, response)
        print("DEBUG: Message received - Action: " .. tostring(msg.Tags.Action) .. ", From: " .. tostring(msg.From))
        return true
    end
)

Handlers.add(
    "get_article_count",
    Handlers.utils.hasMatchingTag("Action", "GetArticleCount"),
    function(msg, env, response)
        print("DEBUG GetArticleCount: called")
        local count = 0
        for _ in pairs(ArticleTable) do
            count = count + 1
        end
        if msg.reply then
            msg.reply({count = count})
        else
            Send({Target = msg.From, Data = json.encode({count = count})})
        end
    end
)

Handlers.add(
    "get_article_id_sequence",
    Handlers.utils.hasMatchingTag("Action", "GetArticleIdSequence"),
    function(msg, env, response)
        -- 调试：打印msg.From的值
        print("DEBUG GetArticleIdSequence: msg.From = " .. tostring(msg.From))
        print("DEBUG GetArticleIdSequence: ao.id = " .. tostring(ao.id))
        print("DEBUG GetArticleIdSequence: ArticleIdSequence = " .. tostring(ArticleIdSequence))

        -- 尝试像token应用一样回复
        if msg.reply then
            print("DEBUG: using msg.reply")
            msg.reply({
                Action = "GetArticleIdSequence_Response",
                Result = ArticleIdSequence
            })
        else
            print("DEBUG: using Send to msg.From")
            Send({
                Target = msg.From,
                Action = "GetArticleIdSequence_Response",
                Result = ArticleIdSequence
            })
        end

        -- 设置全局变量
        _G.GetArticleIdSequenceResult = ArticleIdSequence
        return ArticleIdSequence
    end
)

Handlers.add(
    "update_article_body",
    Handlers.utils.hasMatchingTag("Action", "UpdateArticleBody"),
    update_article_body
)

Handlers.add(
    "create_article",
    Handlers.utils.hasMatchingTag("Action", "CreateArticle"),
    create_article
)

Handlers.add(
    "update_article",
    Handlers.utils.hasMatchingTag("Action", "UpdateArticle"),
    update_article
)

Handlers.add(
    "add_comment",
    Handlers.utils.hasMatchingTag("Action", "AddComment"),
    add_comment
)

Handlers.add(
    "update_comment",
    Handlers.utils.hasMatchingTag("Action", "UpdateComment"),
    update_comment
)

Handlers.add(
    "remove_comment",
    Handlers.utils.hasMatchingTag("Action", "RemoveComment"),
    remove_comment
)

Handlers.add(
    "get_inventory_item",
    Handlers.utils.hasMatchingTag("Action", "GetInventoryItem"),
    get_inventory_item
)

Handlers.add(
    "get_inventory_item_count",
    Handlers.utils.hasMatchingTag("Action", "GetInventoryItemCount"),
    function(msg, env, response)
        local count = 0
        for _ in pairs(InventoryItemTable) do
            count = count + 1
        end
        if msg.reply then
            msg.reply({count = count})
        else
            Send({Target = msg.From, Data = json.encode({count = count})})
        end
    end
)

Handlers.add(
    "get_inventory_item_table_keys",
    Handlers.utils.hasMatchingTag("Action", "GetInventoryItemTableKeys"),
    function(msg, env, response)
        local keys = {}
        local n = 0
        for k, v in pairs(InventoryItemTable) do
            n = n + 1
            keys[n] = k
        end
        if msg.reply then
            msg.reply({keys = keys})
        else
            Send({Target = msg.From, Data = json.encode({keys = keys})})
        end
    end
)

Handlers.add(
    "add_inventory_item_entry",
    Handlers.utils.hasMatchingTag("Action", "AddInventoryItemEntry"),
    add_inventory_item_entry
)


Handlers.add(
    "get_sage_instance",
    Handlers.utils.hasMatchingTag("Action", "GetSagaInstance"),
    function(msg, env, response)
        local cmd = json.decode(msg.Data)
        local saga_id = cmd.saga_id
        local s = entity_coll.get(SagaInstances, saga_id)
        if msg.reply then
            msg.reply(s)
        else
            Send({Target = msg.From, Data = json.encode(s)})
        end
    end
)


Handlers.add(
    "get_sage_id_sequence",
    Handlers.utils.hasMatchingTag("Action", "GetSagaIdSequence"),
    function(msg, env, response)
        if msg.reply then
            msg.reply(SagaIdSequence)
        else
            Send({Target = msg.From, Data = json.encode(SagaIdSequence)})
        end
    end
)


Handlers.add(
    "inventory_service_process_inventory_surplus_or_shortage",
    Handlers.utils.hasMatchingTag("Action", inventory_service.ACTIONS.PROCESS_INVENTORY_SURPLUS_OR_SHORTAGE),
    inventory_service.process_inventory_surplus_or_shortage
)

Handlers.add(
    "inventory_service_process_inventory_surplus_or_shortage_get_inventory_item_callback",
    Handlers.utils.hasMatchingTag("Action",
        inventory_service.ACTIONS.PROCESS_INVENTORY_SURPLUS_OR_SHORTAGE_GET_INVENTORY_ITEM_CALLBACK),
    inventory_service.process_inventory_surplus_or_shortage_get_inventory_item_callback
)

Handlers.add(
    "inventory_service_process_inventory_surplus_or_shortage_create_single_line_in_out_callback",
    Handlers.utils.hasMatchingTag("Action",
        inventory_service.ACTIONS.PROCESS_INVENTORY_SURPLUS_OR_SHORTAGE_CREATE_SINGLE_LINE_IN_OUT_CALLBACK),
    inventory_service.process_inventory_surplus_or_shortage_create_single_line_in_out_callback
)

Handlers.add(
    "inventory_service_process_inventory_surplus_or_shortage_create_single_line_in_out_compensation_callback",
    Handlers.utils.hasMatchingTag("Action",
        inventory_service.ACTIONS.PROCESS_INVENTORY_SURPLUS_OR_SHORTAGE_CREATE_SINGLE_LINE_IN_OUT_COMPENSATION_CALLBACK),
    inventory_service.process_inventory_surplus_or_shortage_create_single_line_in_out_compensation_callback
)

Handlers.add(
    "inventory_service_process_inventory_surplus_or_shortage_add_inventory_item_entry_callback",
    Handlers.utils.hasMatchingTag("Action",
        inventory_service.ACTIONS.PROCESS_INVENTORY_SURPLUS_OR_SHORTAGE_ADD_INVENTORY_ITEM_ENTRY_CALLBACK),
    inventory_service.process_inventory_surplus_or_shortage_add_inventory_item_entry_callback
)

Handlers.add(
    "inventory_service_process_inventory_surplus_or_shortage_complete_in_out_callback",
    Handlers.utils.hasMatchingTag("Action",
        inventory_service.ACTIONS.PROCESS_INVENTORY_SURPLUS_OR_SHORTAGE_COMPLETE_IN_OUT_CALLBACK),
    inventory_service.process_inventory_surplus_or_shortage_complete_in_out_callback
)

