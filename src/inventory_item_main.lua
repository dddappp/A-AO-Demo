-- <autogenerated>
--   This file was generated by dddappp code generator.
--   Any changes made to this file manually will be lost next time the file is regenerated.
-- </autogenerated>

InventoryItemTable = InventoryItemTable and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(InventoryItemTable) or {}


SagaInstances = SagaInstances and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(SagaInstances) or {}

SagaIdSequence = SagaIdSequence and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(SagaIdSequence) or { 0 }


local json = require("json")
local entity_coll = require("entity_coll")
local messaging = require("messaging")
local saga = require("saga")
local inventory_item_id = require("inventory_item_id")
local inventory_item_aggregate = require("inventory_item_aggregate")

inventory_item_aggregate.init(InventoryItemTable)

saga.init(SagaInstances, SagaIdSequence)


local function get_inventory_item(msg, env, response)
    local status, result = pcall((function()
        local cmd = json.decode(msg.Data)  -- 解析JSON对象
        local _inventory_item_id = cmd.inventory_item_id  -- 提取值对象
        local _key = json.encode(inventory_item_id.to_key_array(_inventory_item_id))
        local _state = entity_coll.get(InventoryItemTable, _key)
        return _state
    end))
    messaging.respond(status, result, msg)
end

local function add_inventory_item_entry(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return inventory_item_aggregate.add_inventory_item_entry(cmd, msg, env)
    end))
    messaging.process_operation_result(status, result, commit, msg)
end

Handlers.add(
    "get_inventory_item",
    Handlers.utils.hasMatchingTag("Action", "GetInventoryItem"),
    get_inventory_item
)

Handlers.add(
    "get_inventory_item_count",
    Handlers.utils.hasMatchingTag("Action", "GetInventoryItemCount"),
    function(msg, env, response)
        local count = 0
        for _ in pairs(InventoryItemTable) do
            count = count + 1
        end
        messaging.respond(true, count, msg)
    end
)

Handlers.add(
    "get_inventory_item_table_keys",
    Handlers.utils.hasMatchingTag("Action", "GetInventoryItemTableKeys"),
    function(msg, env, response)
        local keys = {}
        local n = 0
        for k, v in pairs(InventoryItemTable) do
            n = n + 1
            keys[n] = k
        end
        messaging.respond(true, keys, msg)
    end
)

Handlers.add(
    "add_inventory_item_entry",
    Handlers.utils.hasMatchingTag("Action", "AddInventoryItemEntry"),
    add_inventory_item_entry
)


Handlers.add(
    "get_sage_instance",
    Handlers.utils.hasMatchingTag("Action", "GetSagaInstance"),
    function(msg, env, response)
        local cmd = json.decode(msg.Data)
        local saga_id = cmd.saga_id
        local s = entity_coll.get(SagaInstances, saga_id)
        messaging.respond(true, s, msg)
    end
)


Handlers.add(
    "get_sage_id_sequence",
    Handlers.utils.hasMatchingTag("Action", "GetSagaIdSequence"),
    function(msg, env, response)
        messaging.respond(true, SagaIdSequence, msg)
    end
)


