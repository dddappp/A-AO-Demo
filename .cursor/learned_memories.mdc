---
name: "A-AO-Demo Project Memories"
description: "Project context, history, and collective knowledge for A-AO-Demo"
type: "memory"
version: "1.0.0"
created: "2025-10-20"
updated: "2025-10-20"
tags: ["project-history", "architecture", "ao-ecosystem", "dddml", "saga-patterns"]
globs: ["**/*.lua", "**/*.md", "**/*.yaml"]
priority: 5
---

# A-AO-Demo 项目记忆 (Project Memory)

## 项目概述

**项目名称**: An AO Dapp Development Demo with a Low-Code Approach
**项目类型**: AO (Arweave Overlay) 生态的多语言 Dapp 开发演示
**技术栈**: Lua + Java + JavaScript + Docker
**架构模式**: DDD (Domain-Driven Design) + Saga 事务 + 最终一致性

**创建时间**: 2025年10月20日
**最后更新**: 2025年10月20日

---

## 🏗️ 核心架构理解

### 1. AO 生态系统
- **AO (Arweave Overlay)**: 去中心化计算平台，支持 Lua 智能合约
- **AOS (Arweave Overlay System)**: AO 的操作系统 shell，提供 Lua 运行时
- **多进程架构**: 每个业务模块可独立部署为 AO 进程
- **异步消息通信**: 进程间通过消息传递实现 Saga 协调

### 2. 技术架构分层
```
┌─────────────────────────────────────────┐
│           客户端层 (Client Layer)         │
│  • JavaScript/Node.js                   │
│  • Java (OAuth 集成)                    │
│  • 测试脚本 (Shell/Bash)                │
└─────────────────────────────────────────┘
                   │
┌─────────────────────────────────────────┐
│          智能合约层 (Smart Contract)     │
│  • Lua (AO 进程)                        │
│  • 库存管理系统 (Inventory Mgmt)       │
│  • 博客系统 (Blog System)               │
│  • Saga 事务协调器                      │
└─────────────────────────────────────────┘
                   │
┌─────────────────────────────────────────┐
│          基础设施层 (Infrastructure)     │
│  • AO 网络 (Arweave Overlay)            │
│  • Docker 容器                          │
│  • aos CLI 工具                         │
└─────────────────────────────────────────┘
```

### 3. 关键概念

#### DDDML (Domain-Driven Design Modeling Language)
- **低代码工具**: dddappp 用于从模型生成代码
- **模型文件**: `dddml/a-ao-demo.yaml`, `dddml/blog.yaml`
- **代码生成**: Docker 容器运行生成器

#### Saga 模式
- **最终一致性**: 解决跨进程事务问题
- **异步编排**: 通过消息协调多个参与者
- **补偿机制**: 失败时执行补偿操作

#### AO 进程通信
- **消息驱动**: 所有交互通过异步消息
- **JSON 序列化**: 消息数据必须可序列化
- **进程隔离**: 每个模块独立运行时

---

## 📁 项目结构记忆

### 根目录结构
```
A-AO-Demo/
├── src/                    # Lua 源码 (AO 智能合约)
├── dddml/                  # DDDML 模型文件
├── docs/                   # 项目文档
├── ao-cli-non-repl/        # AO CLI 非交互式工具
├── google-oauth2-demo/     # Google OAuth2 集成演示
├── javet-aoconnect-demo/   # Java AO 连接演示
├── js-aoconnect-test/      # JavaScript AO 测试
├── AES-Shamir-Demo/        # 加密算法演示
├── tests/                  # 测试脚本
└── .cursor/               # 项目记忆和规则 (新增)
```

### src/ 目录结构 (关键记忆)
```
src/
├── *-logic.lua            # 业务逻辑填充文件 (需要手动实现)
├── *_aggregate.lua        # 聚合根实现 (自动生成)
├── *_main.lua             # 模块入口文件 (自动生成)
├── messaging.lua          # 消息处理基础设施
├── saga.lua               # Saga 事务框架
├── entity_coll.lua        # 实体集合管理
└── *_service*.lua         # 服务实现
```

### 重要文件映射
- `src/a_ao_demo.lua` → 单进程完整应用
- `src/blog_main.lua` → 博客模块独立入口
- `src/inventory_service_main.lua` → 库存服务模块入口
- `src/messaging.lua` → 消息处理核心逻辑
- `src/saga_messaging.lua` → Saga 消息处理

---

## 🔧 开发工作流

### 1. 代码生成流程
```bash
# 1. 修改 DDDML 模型文件
vim dddml/a-ao-demo.yaml

# 2. 生成代码
docker run --rm \
  -v .:/myapp \
  wubuku/dddappp-ao:latest \
  --dddmlDirectoryPath /myapp/dddml \
  --boundedContextName A.AO.Demo \
  --aoLuaProjectDirectoryPath /myapp/src

# 3. 实现业务逻辑
vim src/*_logic.lua  # 填充业务逻辑
```

### 2. 测试流程
```bash
# 单进程测试
aos process_alice
.load src/a_ao_demo.lua

# 多进程测试 (推荐生产模式)
aos process_inventory_item
.load src/inventory_item_main.lua
# ... 启动其他进程
```

### 3. 调试技巧
- **消息追踪**: 使用 `Inbox[#Inbox]` 查看最新消息
- **状态检查**: 直接访问全局变量如 `ArticleTable`, `InventoryItemTable`
- **跨进程调试**: 在不同终端窗口监控各进程的输出

---

## ⚠️ 关键技术陷阱 (Critical Gotchas)

### 1. Lua Table Key 判等问题
```lua
-- ❌ 危险: 使用复杂对象作为 table key
local complex_id = {article_id = 123, seq = 456}
ArticleTable[complex_id] = data  -- 引用判等问题

-- ✅ 正确: 使用字符串 key
local key = json.encode({article_id = 123, seq = 456})
ArticleTable[key] = data
```

**记忆**: Lua 中只有 `string`, `number`, `boolean` 是安全的 table key，其他类型使用引用判等。

### 2. AO 消息序列化限制
```lua
-- ❌ 错误: bint 对象无法序列化
Send({Target = target, Quantity = bint("1000")})

-- ✅ 正确: 使用字符串
Send({Target = target, Quantity = "1000"})
```

**记忆**: AO 消息必须使用字符串表示数值，内部计算时再转换为 `bint`。

### 3. Saga 异步执行陷阱
```lua
-- ❌ 危险: 在 Saga 步骤中直接修改状态
function saga_step(context)
    -- 直接修改可能失败
    global_state.value = new_value
    return {result = "ok"}
end

-- ✅ 正确: 使用 commit 函数确保事务性
function saga_step(context)
    return function(commit)
        if commit then
            global_state.value = new_value
        end
        return {result = "ok"}
    end
end
```

**记忆**: Saga 步骤返回函数，commit 参数控制实际状态修改。

### 4. 消息处理器注册顺序
**记忆**: `Handlers.add()` 调用顺序影响消息处理优先级，相同 tag 的处理器按注册顺序执行。

---

## 🧪 测试策略记忆

### 1. 测试层次
- **单元测试**: 单个函数逻辑验证
- **集成测试**: 跨组件交互验证
- **端到端测试**: 完整业务流程验证
- **Saga 测试**: 跨进程事务验证

### 2. AO 进程管理
```bash
# 进程命名约定
aos process_alice     # 主进程
aos process_bob       # 测试进程
aos process_inventory # 库存模块进程
aos process_blog      # 博客模块进程
```

### 3. 自动化测试脚本
- `ao-cli-non-repl/tests/run-saga-tests.sh` - Saga 事务测试
- `ao-cli-non-repl/tests/run-blog-tests.sh` - 博客功能测试
- `ao-cli-non-repl/tests/run-official-token-tests.sh` - Token 合约测试

---

## 🔄 常见问题解决方案

### 1. 代码生成后文件冲突
**现象**: 修改了生成的代码，重新生成时被覆盖
**解决方案**: 只修改 `*_logic.lua` 文件，这些是专门用于填充业务逻辑的

### 2. 跨进程消息丢失
**现象**: Saga 步骤间消息无法送达
**解决方案**:
- 检查 `inventory_service_config.lua` 中的进程 ID 配置
- 验证目标进程已启动并加载了相应代码
- 使用 `Inbox[#Inbox]` 检查消息接收状态

### 3. JSON 序列化错误
**现象**: 复杂对象无法序列化
**解决方案**: 确保所有消息数据都是基本类型或可序列化的 table

### 4. Saga 事务死锁
**现象**: 多个 Saga 相互等待
**解决方案**: 检查 Saga 定义中的循环依赖，使用异步消息解耦

---

## 📚 关键文档索引

### 核心文档
- `README.md` - 项目概述和快速开始
- `README_CN.md` - 中文详细文档
- `docs/A-AO-Demo-Module-Planning.md` - 模块化规划
- `docs/BlogExample.md` - 博客示例指南

### 技术文档
- `docs/drafts/AO-Lua-BigInteger-Loading-Mechanism.md` - BigInteger 机制详解
- `docs/drafts/AO-Message-System-Complete-Analysis.md` - 消息系统分析
- `docs/AO-Testing-with-iTerm-MCP-Server.md` - 测试指南

### 代码文档
- `dddml/a-ao-demo.yaml` - 库存管理领域模型
- `dddml/blog.yaml` - 博客领域模型
- `dddml/configuration.yaml` - 模块配置

---

## 🎯 开发原则和最佳实践

### 1. 代码组织原则
- **单一职责**: 每个文件/模块只负责一个明确的功能
- **依赖注入**: 通过配置文件管理进程间依赖
- **错误处理**: 使用 `pcall` 包装可能失败的操作

### 2. AO 开发最佳实践
- **消息优先**: 所有交互通过异步消息
- **最终一致性**: 接受分布式系统的特性
- **字符串序列化**: 数值在传输时使用字符串

### 3. 测试原则
- **自动化优先**: 所有测试应可自动化执行
- **进程隔离**: 不同模块的测试在独立进程中运行
- **状态清理**: 每个测试用例结束后清理状态

### 4. 文档原则
- **代码即文档**: 复杂逻辑要有详细注释
- **变更记录**: 重要修改要有文档记录
- **示例完整**: 文档中的代码示例要可直接运行

---

## 🚀 快速参考命令

### 开发环境设置
```bash
# 启动 AO 进程
aos process_alice

# 加载完整应用
.load src/a_ao_demo.lua

# 查看进程状态
ps aux | grep aos
```

### 代码生成
```bash
# 生成代码 (单进程模式)
docker run --rm -v .:/myapp wubuku/dddappp-ao:latest \
  --dddmlDirectoryPath /myapp/dddml \
  --boundedContextName A.AO.Demo \
  --aoLuaProjectDirectoryPath /myapp/src

# 生成代码 (多进程模式)
docker run --rm -v .:/myapp wubuku/dddappp-ao:master \
  --dddmlDirectoryPath /myapp/dddml \
  --boundedContextName A.AO.Demo \
  --aoLuaProjectDirectoryPath /myapp/src \
  --exposeBaseDddmlFiles \
  --enableMultipleAOLuaProjects
```

### 测试执行
```bash
# Saga 事务测试
./ao-cli-non-repl/tests/run-saga-tests.sh

# 博客功能测试
./ao-cli-non-repl/tests/run-blog-tests.sh

# Token 合约测试
./ao-cli-non-repl/tests/run-official-token-tests.sh
```

### 调试命令
```lua
-- 查看最新消息
Inbox[#Inbox]

-- 查看全局状态
ArticleTable
InventoryItemTable
SagaInstances

-- 发送测试消息
Send({Target = "PROCESS_ID", Action = "TestAction", Data = "{}"})
```

---

## 📝 更新日志

### 2025-10-20 (初始创建)
- 创建项目记忆文档
- 记录核心架构和开发原则
- 整理常见问题和解决方案
- 建立快速参考命令集

### 未来更新计划
- 添加更多调试技巧
- 完善性能优化指南
- 补充安全最佳实践
- 更新依赖管理说明

---

*此文档作为项目的"集体记忆"，记录了关键的技术决策、陷阱和最佳实践。新加入的开发者请仔细阅读，现有成员请持续更新。*