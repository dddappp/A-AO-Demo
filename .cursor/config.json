{
  "name": "A-AO-Demo",
  "version": "1.0.0",
  "description": "AO Dapp Development Demo with Low-Code Approach",
  "schema": "https://cursor.sh/schema/project/v1",
  "rules": {
    "enabled": true,
    "directories": [
      "rules/"
    ],
    "files": [
      "rules/project-rules.mdc",
      "rules/ao-development.mdc"
    ]
  },
  "memory": {
    "enabled": true,
    "files": [
      "learned_memories.mdc"
    ]
  },
  "metadata": {
    "primaryLanguage": "lua",
    "framework": "AO",
    "architecture": "Microservices + Saga",
    "paradigm": "Domain-Driven Design",
    "technologies": ["AO", "Lua", "DDDML", "Docker", "Saga"],
    "lastUpdated": "2025-10-20",
    "cursorVersion": "2025.10",
    "ruleFormat": "mdc",
    "memoryFormat": "mdc"
  },
  "development": {
    "codeGeneration": {
      "tool": "dddappp",
      "command": "docker run --rm -v .:/myapp wubuku/dddappp-ao:latest --dddmlDirectoryPath /myapp/dddml --boundedContextName A.AO.Demo --aoLuaProjectDirectoryPath /myapp/src"
    },
    "testing": {
      "framework": "AO CLI",
      "scripts": [
        "ao-cli-non-repl/tests/run-saga-tests.sh",
        "ao-cli-non-repl/tests/run-blog-tests.sh",
        "ao-cli-non-repl/tests/run-official-token-tests.sh"
      ]
    },
    "environments": {
      "development": {
        "processes": ["alice", "bob"],
        "scripts": ["src/a_ao_demo.lua"]
      },
      "production": {
        "architecture": "multi-process",
        "processes": ["inventory", "blog", "in_out_service"]
      }
    }
  },
  "constraints": {
    "lua": {
      "safeTableKeys": ["string", "number", "boolean"],
      "serialization": "JSON only",
      "asyncCommunication": true
    },
    "ao": {
      "messageFormat": "JSON serializable",
      "processIsolation": true,
      "eventualConsistency": true
    }
  },
  "patterns": {
    "handler": "Handlers.add('name', Handlers.utils.hasMatchingTag('Action', 'ActionName'), handlerFunc)",
    "sagaStep": "return function(commit) if commit then modifyState() end return result end",
    "errorHandling": "local status, result = pcall(func) if not status then handleError(result) end"
  },
  "fileTypes": {
    ".lua": {
      "language": "lua",
      "framework": "AO",
      "autoGenerated": {
        "pattern": "!*_logic.lua && !*_config.lua && !*_mock.lua",
        "warning": "This file is auto-generated and will be overwritten"
      }
    },
    ".yaml": {
      "language": "yaml",
      "purpose": "DDDML domain model",
      "autoGenerate": true
    }
  }
}
